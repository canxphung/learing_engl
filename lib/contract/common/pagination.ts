// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               unknown
// source: common/pagination.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "common";

/** Pagination information for list responses */
export interface Pagination {
  /** Current page number (1-indexed) */
  page: number;
  /** Number of items per page */
  limit: number;
  /** Total number of items */
  total: number;
  /** Total number of pages */
  totalPages: number;
  /** Whether there is a next page */
  hasNext: boolean;
  /** Whether there is a previous page */
  hasPrev: boolean;
}

/** Page request for paginated queries */
export interface PageRequest {
  /** Page number to retrieve (default: 1) */
  page: number;
  /** Items per page (default: 10, max: 100) */
  limit: number;
  /** Field to sort by */
  sortBy: string;
  /** Sort in descending order */
  sortDesc: boolean;
}

/** Cursor-based pagination request */
export interface CursorRequest {
  /** Cursor for pagination */
  cursor: string;
  /** Items per page */
  limit: number;
}

/** Cursor-based pagination response */
export interface CursorPagination {
  /** Cursor for next page */
  nextCursor: string;
  /** Cursor for previous page */
  prevCursor: string;
  /** Whether there is a next page */
  hasNext: boolean;
  /** Whether there is a previous page */
  hasPrev: boolean;
  /** Total number of items (optional) */
  total: number;
}

function createBasePagination(): Pagination {
  return { page: 0, limit: 0, total: 0, totalPages: 0, hasNext: false, hasPrev: false };
}

export const Pagination: MessageFns<Pagination> = {
  encode(message: Pagination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.total !== 0) {
      writer.uint32(24).int32(message.total);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    if (message.hasNext !== false) {
      writer.uint32(40).bool(message.hasNext);
    }
    if (message.hasPrev !== false) {
      writer.uint32(48).bool(message.hasPrev);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pagination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hasNext = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hasPrev = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pagination {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      hasNext: isSet(object.hasNext) ? globalThis.Boolean(object.hasNext) : false,
      hasPrev: isSet(object.hasPrev) ? globalThis.Boolean(object.hasPrev) : false,
    };
  },

  toJSON(message: Pagination): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.hasNext !== false) {
      obj.hasNext = message.hasNext;
    }
    if (message.hasPrev !== false) {
      obj.hasPrev = message.hasPrev;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pagination>, I>>(base?: I): Pagination {
    return Pagination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pagination>, I>>(object: I): Pagination {
    const message = createBasePagination();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.total = object.total ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.hasNext = object.hasNext ?? false;
    message.hasPrev = object.hasPrev ?? false;
    return message;
  },
};

function createBasePageRequest(): PageRequest {
  return { page: 0, limit: 0, sortBy: "", sortDesc: false };
}

export const PageRequest: MessageFns<PageRequest> = {
  encode(message: PageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.sortBy !== "") {
      writer.uint32(26).string(message.sortBy);
    }
    if (message.sortDesc !== false) {
      writer.uint32(32).bool(message.sortDesc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sortBy = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sortDesc = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      sortBy: isSet(object.sortBy) ? globalThis.String(object.sortBy) : "",
      sortDesc: isSet(object.sortDesc) ? globalThis.Boolean(object.sortDesc) : false,
    };
  },

  toJSON(message: PageRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.sortBy !== "") {
      obj.sortBy = message.sortBy;
    }
    if (message.sortDesc !== false) {
      obj.sortDesc = message.sortDesc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PageRequest>, I>>(base?: I): PageRequest {
    return PageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PageRequest>, I>>(object: I): PageRequest {
    const message = createBasePageRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.sortBy = object.sortBy ?? "";
    message.sortDesc = object.sortDesc ?? false;
    return message;
  },
};

function createBaseCursorRequest(): CursorRequest {
  return { cursor: "", limit: 0 };
}

export const CursorRequest: MessageFns<CursorRequest> = {
  encode(message: CursorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== "") {
      writer.uint32(10).string(message.cursor);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CursorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCursorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CursorRequest {
    return {
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: CursorRequest): unknown {
    const obj: any = {};
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CursorRequest>, I>>(base?: I): CursorRequest {
    return CursorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CursorRequest>, I>>(object: I): CursorRequest {
    const message = createBaseCursorRequest();
    message.cursor = object.cursor ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseCursorPagination(): CursorPagination {
  return { nextCursor: "", prevCursor: "", hasNext: false, hasPrev: false, total: 0 };
}

export const CursorPagination: MessageFns<CursorPagination> = {
  encode(message: CursorPagination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextCursor !== "") {
      writer.uint32(10).string(message.nextCursor);
    }
    if (message.prevCursor !== "") {
      writer.uint32(18).string(message.prevCursor);
    }
    if (message.hasNext !== false) {
      writer.uint32(24).bool(message.hasNext);
    }
    if (message.hasPrev !== false) {
      writer.uint32(32).bool(message.hasPrev);
    }
    if (message.total !== 0) {
      writer.uint32(40).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CursorPagination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCursorPagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nextCursor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prevCursor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasNext = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasPrev = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CursorPagination {
    return {
      nextCursor: isSet(object.nextCursor) ? globalThis.String(object.nextCursor) : "",
      prevCursor: isSet(object.prevCursor) ? globalThis.String(object.prevCursor) : "",
      hasNext: isSet(object.hasNext) ? globalThis.Boolean(object.hasNext) : false,
      hasPrev: isSet(object.hasPrev) ? globalThis.Boolean(object.hasPrev) : false,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: CursorPagination): unknown {
    const obj: any = {};
    if (message.nextCursor !== "") {
      obj.nextCursor = message.nextCursor;
    }
    if (message.prevCursor !== "") {
      obj.prevCursor = message.prevCursor;
    }
    if (message.hasNext !== false) {
      obj.hasNext = message.hasNext;
    }
    if (message.hasPrev !== false) {
      obj.hasPrev = message.hasPrev;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CursorPagination>, I>>(base?: I): CursorPagination {
    return CursorPagination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CursorPagination>, I>>(object: I): CursorPagination {
    const message = createBaseCursorPagination();
    message.nextCursor = object.nextCursor ?? "";
    message.prevCursor = object.prevCursor ?? "";
    message.hasNext = object.hasNext ?? false;
    message.hasPrev = object.hasPrev ?? false;
    message.total = object.total ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
