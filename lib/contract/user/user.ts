// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               unknown
// source: user/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Status, StatusResponse } from "../common/common";
import { PageRequest, Pagination } from "../common/pagination";

export const protobufPackage = "user";

/** User entity */
export interface User {
  id: string;
  email: string;
  name: string;
  /** beginner, intermediate, advanced */
  level: string;
  goals: string[];
  createdAt: string;
  updatedAt: string;
  profile: Profile | undefined;
  isActive: boolean;
  emailVerified: boolean;
  lastLogin: string;
}

/** User profile information */
export interface Profile {
  avatarUrl: string;
  country: string;
  nativeLanguage: string;
  age: number;
  preferences: { [key: string]: string };
  bio: string;
  timezone: string;
}

export interface Profile_PreferencesEntry {
  key: string;
  value: string;
}

/** Request to create a new user */
export interface CreateUserRequest {
  email: string;
  password: string;
  name: string;
  level: string;
  goals: string[];
  profile: Profile | undefined;
}

/** Request to update user information */
export interface UpdateUserRequest {
  id: string;
  name: string;
  level: string;
  goals: string[];
  profile: Profile | undefined;
}

/** Request to update user profile */
export interface UpdateProfileRequest {
  userId: string;
  profile: Profile | undefined;
}

/** Single user response */
export interface UserResponse {
  status: Status | undefined;
  user: User | undefined;
}

/** Multiple users response */
export interface UsersResponse {
  status: Status | undefined;
  users: User[];
  pagination: Pagination | undefined;
}

/** Request to validate user credentials */
export interface ValidateUserRequest {
  email: string;
  password: string;
}

/** Response for user validation */
export interface ValidateUserResponse {
  status: Status | undefined;
  valid: boolean;
  user: User | undefined;
}

/** Query parameters for searching users */
export interface UserQuery {
  id: string;
  email: string;
  levels: string[];
  country: string;
  isActive: boolean;
  createdAfter: string;
  createdBefore: string;
}

/** Request to get user by ID */
export interface GetUserRequest {
  id: string;
}

/** Request to delete user */
export interface DeleteUserRequest {
  id: string;
}

/** Request to list users with pagination */
export interface ListUsersRequest {
  page: PageRequest | undefined;
  query: UserQuery | undefined;
}

/** Request to change user password */
export interface ChangePasswordRequest {
  userId: string;
  oldPassword: string;
  newPassword: string;
}

/** Request to verify user email */
export interface VerifyEmailRequest {
  userId: string;
  verificationToken: string;
}

function createBaseUser(): User {
  return {
    id: "",
    email: "",
    name: "",
    level: "",
    goals: [],
    createdAt: "",
    updatedAt: "",
    profile: undefined,
    isActive: false,
    emailVerified: false,
    lastLogin: "",
  };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.level !== "") {
      writer.uint32(34).string(message.level);
    }
    for (const v of message.goals) {
      writer.uint32(42).string(v!);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(66).fork()).join();
    }
    if (message.isActive !== false) {
      writer.uint32(72).bool(message.isActive);
    }
    if (message.emailVerified !== false) {
      writer.uint32(80).bool(message.emailVerified);
    }
    if (message.lastLogin !== "") {
      writer.uint32(90).string(message.lastLogin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.goals.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.lastLogin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      goals: globalThis.Array.isArray(object?.goals) ? object.goals.map((e: any) => globalThis.String(e)) : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
      lastLogin: isSet(object.lastLogin) ? globalThis.String(object.lastLogin) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.goals?.length) {
      obj.goals = message.goals;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.lastLogin !== "") {
      obj.lastLogin = message.lastLogin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.level = object.level ?? "";
    message.goals = object.goals?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    message.isActive = object.isActive ?? false;
    message.emailVerified = object.emailVerified ?? false;
    message.lastLogin = object.lastLogin ?? "";
    return message;
  },
};

function createBaseProfile(): Profile {
  return { avatarUrl: "", country: "", nativeLanguage: "", age: 0, preferences: {}, bio: "", timezone: "" };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.avatarUrl !== "") {
      writer.uint32(10).string(message.avatarUrl);
    }
    if (message.country !== "") {
      writer.uint32(18).string(message.country);
    }
    if (message.nativeLanguage !== "") {
      writer.uint32(26).string(message.nativeLanguage);
    }
    if (message.age !== 0) {
      writer.uint32(32).int32(message.age);
    }
    Object.entries(message.preferences).forEach(([key, value]) => {
      Profile_PreferencesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.bio !== "") {
      writer.uint32(50).string(message.bio);
    }
    if (message.timezone !== "") {
      writer.uint32(58).string(message.timezone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nativeLanguage = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = Profile_PreferencesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.preferences[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.timezone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      nativeLanguage: isSet(object.nativeLanguage) ? globalThis.String(object.nativeLanguage) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      preferences: isObject(object.preferences)
        ? Object.entries(object.preferences).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : "",
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.nativeLanguage !== "") {
      obj.nativeLanguage = message.nativeLanguage;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.preferences) {
      const entries = Object.entries(message.preferences);
      if (entries.length > 0) {
        obj.preferences = {};
        entries.forEach(([k, v]) => {
          obj.preferences[k] = v;
        });
      }
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.timezone !== "") {
      obj.timezone = message.timezone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.avatarUrl = object.avatarUrl ?? "";
    message.country = object.country ?? "";
    message.nativeLanguage = object.nativeLanguage ?? "";
    message.age = object.age ?? 0;
    message.preferences = Object.entries(object.preferences ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.bio = object.bio ?? "";
    message.timezone = object.timezone ?? "";
    return message;
  },
};

function createBaseProfile_PreferencesEntry(): Profile_PreferencesEntry {
  return { key: "", value: "" };
}

export const Profile_PreferencesEntry: MessageFns<Profile_PreferencesEntry> = {
  encode(message: Profile_PreferencesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile_PreferencesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile_PreferencesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile_PreferencesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Profile_PreferencesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile_PreferencesEntry>, I>>(base?: I): Profile_PreferencesEntry {
    return Profile_PreferencesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile_PreferencesEntry>, I>>(object: I): Profile_PreferencesEntry {
    const message = createBaseProfile_PreferencesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return { email: "", password: "", name: "", level: "", goals: [], profile: undefined };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.level !== "") {
      writer.uint32(34).string(message.level);
    }
    for (const v of message.goals) {
      writer.uint32(42).string(v!);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.goals.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      goals: globalThis.Array.isArray(object?.goals) ? object.goals.map((e: any) => globalThis.String(e)) : [],
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.goals?.length) {
      obj.goals = message.goals;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequest>, I>>(base?: I): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequest>, I>>(object: I): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.name = object.name ?? "";
    message.level = object.level ?? "";
    message.goals = object.goals?.map((e) => e) || [];
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return { id: "", name: "", level: "", goals: [], profile: undefined };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
  encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.level !== "") {
      writer.uint32(26).string(message.level);
    }
    for (const v of message.goals) {
      writer.uint32(34).string(v!);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.goals.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      goals: globalThis.Array.isArray(object?.goals) ? object.goals.map((e: any) => globalThis.String(e)) : [],
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: UpdateUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.goals?.length) {
      obj.goals = message.goals;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(base?: I): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(object: I): UpdateUserRequest {
    const message = createBaseUpdateUserRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.level = object.level ?? "";
    message.goals = object.goals?.map((e) => e) || [];
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { userId: "", profile: undefined };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.userId = object.userId ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUserResponse(): UserResponse {
  return { status: undefined, user: undefined };
}

export const UserResponse: MessageFns<UserResponse> = {
  encode(message: UserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: UserResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserResponse>, I>>(base?: I): UserResponse {
    return UserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserResponse>, I>>(object: I): UserResponse {
    const message = createBaseUserResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseUsersResponse(): UsersResponse {
  return { status: undefined, users: [], pagination: undefined };
}

export const UsersResponse: MessageFns<UsersResponse> = {
  encode(message: UsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.users) {
      User.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      Pagination.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = Pagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsersResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? Pagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: UsersResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = Pagination.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UsersResponse>, I>>(base?: I): UsersResponse {
    return UsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UsersResponse>, I>>(object: I): UsersResponse {
    const message = createBaseUsersResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? Pagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseValidateUserRequest(): ValidateUserRequest {
  return { email: "", password: "" };
}

export const ValidateUserRequest: MessageFns<ValidateUserRequest> = {
  encode(message: ValidateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateUserRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: ValidateUserRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateUserRequest>, I>>(base?: I): ValidateUserRequest {
    return ValidateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateUserRequest>, I>>(object: I): ValidateUserRequest {
    const message = createBaseValidateUserRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseValidateUserResponse(): ValidateUserResponse {
  return { status: undefined, valid: false, user: undefined };
}

export const ValidateUserResponse: MessageFns<ValidateUserResponse> = {
  encode(message: ValidateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.valid !== false) {
      writer.uint32(16).bool(message.valid);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateUserResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: ValidateUserResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateUserResponse>, I>>(base?: I): ValidateUserResponse {
    return ValidateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateUserResponse>, I>>(object: I): ValidateUserResponse {
    const message = createBaseValidateUserResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.valid = object.valid ?? false;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseUserQuery(): UserQuery {
  return { id: "", email: "", levels: [], country: "", isActive: false, createdAfter: "", createdBefore: "" };
}

export const UserQuery: MessageFns<UserQuery> = {
  encode(message: UserQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    for (const v of message.levels) {
      writer.uint32(26).string(v!);
    }
    if (message.country !== "") {
      writer.uint32(34).string(message.country);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.createdAfter !== "") {
      writer.uint32(50).string(message.createdAfter);
    }
    if (message.createdBefore !== "") {
      writer.uint32(58).string(message.createdBefore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.levels.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAfter = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdBefore = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserQuery {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      levels: globalThis.Array.isArray(object?.levels) ? object.levels.map((e: any) => globalThis.String(e)) : [],
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      createdAfter: isSet(object.createdAfter) ? globalThis.String(object.createdAfter) : "",
      createdBefore: isSet(object.createdBefore) ? globalThis.String(object.createdBefore) : "",
    };
  },

  toJSON(message: UserQuery): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.levels?.length) {
      obj.levels = message.levels;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAfter !== "") {
      obj.createdAfter = message.createdAfter;
    }
    if (message.createdBefore !== "") {
      obj.createdBefore = message.createdBefore;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserQuery>, I>>(base?: I): UserQuery {
    return UserQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserQuery>, I>>(object: I): UserQuery {
    const message = createBaseUserQuery();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.levels = object.levels?.map((e) => e) || [];
    message.country = object.country ?? "";
    message.isActive = object.isActive ?? false;
    message.createdAfter = object.createdAfter ?? "";
    message.createdBefore = object.createdBefore ?? "";
    return message;
  },
};

function createBaseGetUserRequest(): GetUserRequest {
  return { id: "" };
}

export const GetUserRequest: MessageFns<GetUserRequest> = {
  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRequest>, I>>(base?: I): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRequest>, I>>(object: I): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteUserRequest(): DeleteUserRequest {
  return { id: "" };
}

export const DeleteUserRequest: MessageFns<DeleteUserRequest> = {
  encode(message: DeleteUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(base?: I): DeleteUserRequest {
    return DeleteUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(object: I): DeleteUserRequest {
    const message = createBaseDeleteUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { page: undefined, query: undefined };
}

export const ListUsersRequest: MessageFns<ListUsersRequest> = {
  encode(message: ListUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== undefined) {
      PageRequest.encode(message.page, writer.uint32(10).fork()).join();
    }
    if (message.query !== undefined) {
      UserQuery.encode(message.query, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.page = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.query = UserQuery.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersRequest {
    return {
      page: isSet(object.page) ? PageRequest.fromJSON(object.page) : undefined,
      query: isSet(object.query) ? UserQuery.fromJSON(object.query) : undefined,
    };
  },

  toJSON(message: ListUsersRequest): unknown {
    const obj: any = {};
    if (message.page !== undefined) {
      obj.page = PageRequest.toJSON(message.page);
    }
    if (message.query !== undefined) {
      obj.query = UserQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersRequest>, I>>(base?: I): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersRequest>, I>>(object: I): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.page = (object.page !== undefined && object.page !== null)
      ? PageRequest.fromPartial(object.page)
      : undefined;
    message.query = (object.query !== undefined && object.query !== null)
      ? UserQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return { userId: "", oldPassword: "", newPassword: "" };
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.oldPassword !== "") {
      writer.uint32(18).string(message.oldPassword);
    }
    if (message.newPassword !== "") {
      writer.uint32(26).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oldPassword = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      oldPassword: isSet(object.oldPassword) ? globalThis.String(object.oldPassword) : "",
      newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
    };
  },

  toJSON(message: ChangePasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.oldPassword !== "") {
      obj.oldPassword = message.oldPassword;
    }
    if (message.newPassword !== "") {
      obj.newPassword = message.newPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangePasswordRequest>, I>>(base?: I): ChangePasswordRequest {
    return ChangePasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangePasswordRequest>, I>>(object: I): ChangePasswordRequest {
    const message = createBaseChangePasswordRequest();
    message.userId = object.userId ?? "";
    message.oldPassword = object.oldPassword ?? "";
    message.newPassword = object.newPassword ?? "";
    return message;
  },
};

function createBaseVerifyEmailRequest(): VerifyEmailRequest {
  return { userId: "", verificationToken: "" };
}

export const VerifyEmailRequest: MessageFns<VerifyEmailRequest> = {
  encode(message: VerifyEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.verificationToken !== "") {
      writer.uint32(18).string(message.verificationToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.verificationToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyEmailRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      verificationToken: isSet(object.verificationToken) ? globalThis.String(object.verificationToken) : "",
    };
  },

  toJSON(message: VerifyEmailRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.verificationToken !== "") {
      obj.verificationToken = message.verificationToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyEmailRequest>, I>>(base?: I): VerifyEmailRequest {
    return VerifyEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyEmailRequest>, I>>(object: I): VerifyEmailRequest {
    const message = createBaseVerifyEmailRequest();
    message.userId = object.userId ?? "";
    message.verificationToken = object.verificationToken ?? "";
    return message;
  },
};

/** User service definition */
export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  /** Create a new user */
  createUser: {
    path: "/user.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest): Buffer => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  /** Get user by ID */
  getUser: {
    path: "/user.UserService/GetUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserRequest): Buffer => Buffer.from(GetUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserRequest => GetUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  /** Update user information */
  updateUser: {
    path: "/user.UserService/UpdateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserRequest): Buffer => Buffer.from(UpdateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateUserRequest => UpdateUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  /** Update user profile */
  updateProfile: {
    path: "/user.UserService/UpdateProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProfileRequest): Buffer => Buffer.from(UpdateProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateProfileRequest => UpdateProfileRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  /** Delete user */
  deleteUser: {
    path: "/user.UserService/DeleteUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteUserRequest): Buffer => Buffer.from(DeleteUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteUserRequest => DeleteUserRequest.decode(value),
    responseSerialize: (value: StatusResponse): Buffer => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): StatusResponse => StatusResponse.decode(value),
  },
  /** List users with pagination */
  listUsers: {
    path: "/user.UserService/ListUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListUsersRequest): Buffer => Buffer.from(ListUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListUsersRequest => ListUsersRequest.decode(value),
    responseSerialize: (value: UsersResponse): Buffer => Buffer.from(UsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UsersResponse => UsersResponse.decode(value),
  },
  /** Validate user credentials */
  validateUser: {
    path: "/user.UserService/ValidateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateUserRequest): Buffer => Buffer.from(ValidateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ValidateUserRequest => ValidateUserRequest.decode(value),
    responseSerialize: (value: ValidateUserResponse): Buffer =>
      Buffer.from(ValidateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ValidateUserResponse => ValidateUserResponse.decode(value),
  },
  /** Change user password */
  changePassword: {
    path: "/user.UserService/ChangePassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangePasswordRequest): Buffer =>
      Buffer.from(ChangePasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangePasswordRequest => ChangePasswordRequest.decode(value),
    responseSerialize: (value: StatusResponse): Buffer => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): StatusResponse => StatusResponse.decode(value),
  },
  /** Verify user email */
  verifyEmail: {
    path: "/user.UserService/VerifyEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyEmailRequest): Buffer => Buffer.from(VerifyEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VerifyEmailRequest => VerifyEmailRequest.decode(value),
    responseSerialize: (value: StatusResponse): Buffer => Buffer.from(StatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): StatusResponse => StatusResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  /** Create a new user */
  createUser: handleUnaryCall<CreateUserRequest, UserResponse>;
  /** Get user by ID */
  getUser: handleUnaryCall<GetUserRequest, UserResponse>;
  /** Update user information */
  updateUser: handleUnaryCall<UpdateUserRequest, UserResponse>;
  /** Update user profile */
  updateProfile: handleUnaryCall<UpdateProfileRequest, UserResponse>;
  /** Delete user */
  deleteUser: handleUnaryCall<DeleteUserRequest, StatusResponse>;
  /** List users with pagination */
  listUsers: handleUnaryCall<ListUsersRequest, UsersResponse>;
  /** Validate user credentials */
  validateUser: handleUnaryCall<ValidateUserRequest, ValidateUserResponse>;
  /** Change user password */
  changePassword: handleUnaryCall<ChangePasswordRequest, StatusResponse>;
  /** Verify user email */
  verifyEmail: handleUnaryCall<VerifyEmailRequest, StatusResponse>;
}

export interface UserServiceClient extends Client {
  /** Create a new user */
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  /** Get user by ID */
  getUser(
    request: GetUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  /** Update user information */
  updateUser(
    request: UpdateUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateUser(
    request: UpdateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateUser(
    request: UpdateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  /** Update user profile */
  updateProfile(
    request: UpdateProfileRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  /** Delete user */
  deleteUser(
    request: DeleteUserRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  deleteUser(
    request: DeleteUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  deleteUser(
    request: DeleteUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  /** List users with pagination */
  listUsers(
    request: ListUsersRequest,
    callback: (error: ServiceError | null, response: UsersResponse) => void,
  ): ClientUnaryCall;
  listUsers(
    request: ListUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UsersResponse) => void,
  ): ClientUnaryCall;
  listUsers(
    request: ListUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UsersResponse) => void,
  ): ClientUnaryCall;
  /** Validate user credentials */
  validateUser(
    request: ValidateUserRequest,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  validateUser(
    request: ValidateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  validateUser(
    request: ValidateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  /** Change user password */
  changePassword(
    request: ChangePasswordRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  changePassword(
    request: ChangePasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  changePassword(
    request: ChangePasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  /** Verify user email */
  verifyEmail(
    request: VerifyEmailRequest,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  verifyEmail(
    request: VerifyEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
  verifyEmail(
    request: VerifyEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
